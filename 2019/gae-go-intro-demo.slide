GAE/Goの概要説明とデプロイデモ
GCPUG KAGAWA #1
16 Feb 2019

Ryuji Iwata
Okayama, Japan
@qt_luigi

* Ryuji Iwata

.image gae-go-intro-demo/img/qt_luigi250.png 300 300

Twitter

.link http://twitter.com/qt_luigi @qt_luigi

Google+ (2019年4月2日まで)

.link https://plus.google.com/+RyujiIwata +RyujiIwata

* GAEとは

* Google App Engine

インフラや運用はGoogleに任せて、Webアプリの開発に集中できるサービス。

.link https://cloud.google.com/appengine/

.image gae-go-intro-demo/img/gae-go.png 468 819

* 特徴

- OSやミドルウェアの運用管理はGoogleにお任せ。
- アクセス量に合わせてインスタンス数も自動でスケール。
- 個人での簡単なWebアプリなら無料枠で収まる。

* 2つの環境

* スタンダート環境

- Google独自コンテナーで動作。
- 他のGCPサービスと連携しやすい。
- 使用できるライブラリーや機能に制限がある。
- 対応言語：Python 2.7, Java 7, PHP 5.5, Go 1.9

* フレキシブル環境

- GCEのDockerコンテナーで動作。
- 他のGCPサービスと連携しにくい。
- 使用できるライブラリーや機能に制限がない。
- 対応言語：Python 2.7/3.6, Java 8/9, PHP 5.6/7.0-2, Go 1.9-11, Node.js, Ruby, .NET, 他

* 第２世代スタンダード環境

gVisorベースのコンテナーを導入。

- 使用できるライブラリーや機能の制限がフレキシブル環境並に緩和。
- 対応言語が増加：Python 3.7, Java 8, PHP 7.2, Go 1.11, Node.js 8/10

.link https://cloud.google.com/appengine/docs/standard/appengine-generation

* Goとは

* The Go Programming Language

オープンソースの静的コンパイル形式の汎用プログラミング言語。

.link https://golang.org/

.image gae-go-intro-demo/img/golang-org.png 468 819

* GAEでのGoの特徴

対応言語の中で処理速度が最速。

- Webアプリの起動（スピンアップ）で待たされない。
- リソースの使用時間が短い -> 課金額の節約に。

* コンテナー技術と相性が良い

多くのミドルウェアがGoで開発されている。

GCPに関係するもの:

- Docker（コンテナーエンジン）
- Kubernetes（コンテナーオーケストレーション）
- gVisor（コンテナーランタイムサンドボックス）

* デプロイデモ

* 大まかな流れ

Building a Go App on App Engine

.link https://cloud.google.com/appengine/docs/standard/go111/building-app/

.image gae-go-intro-demo/img/building-go-app.png 468 819

* 開発環境のセットアップ

1. Cloud SDKをダウンロード、インストール、初期化

.link https://cloud.google.com/sdk/docs/

- これにより gcloud コマンドが使えるようになる。

2. Go 1.11をダウンロード、インストール、初期設定

.link https://golang.org/doc/install

- これにより go コマンドが使えるようになる。

3. App Engine Go コンポーネントのインストール

  gcloud components install app-engine-go

* GCPのプロジェクトを作成

1. 新しいプロジェクトを作成

  gcloud projects create PROJECT_ID

2. 新しいGAEアプリを作成

 　gcloud app create

3. プロジェクトの請求先の情報を設定

- 無料枠に収まるにしても、請求先の情報を設定する必要がある。

* Webアプリの作成

1. go-app/ ディレクトリーを作成

  mkdir go-app

2. go-app/ ディレクトリー配下に移動

  cd go-app

3. go-app/ 配下に app.yaml ファイルを作成

  vim app.yaml

4. go-app/ 配下に main.go ファイルを作成

  vim main.go

.link https://cloud.google.com/appengine/docs/standard/go111/building-app/#writing_a_basic_web_service_for_app_engine

* 動作確認

第2世代のGAE/Goでは、Goで普通に書いたHTTPサーバーがGAE/Go上で動作する。

ローカルでHTTPサーバーとして実行

  go run main.go

ローカルのGAEテスト環境で実行

  dev_appserver.py app.yaml

Webブラウザーにて [[http://localhost:8080]] にアクセスして動作を確認。

* GAEへデプロイ

1. 接続先のプロジェクトを確認

  gcloud config list

2. GAEへデプロイ

  gcloud app deploy

3. GAEへアクセスして動作確認

  gcloud app browse
