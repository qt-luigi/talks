Goでコマンドラインツールを作ってプロダクション投入した話
Okayama.go#1+Fukuoka.go
12 Feb 2019

Ryuji Iwata
Okayama, Japan
@qt_luigi

* Ryuji Iwata

.image go-cli-production/img/qt_luigi250.png 300 300

Twitter

.link http://twitter.com/qt_luigi @qt_luigi

Google+ (2019年4月2日まで)

.link https://plus.google.com/+RyujiIwata +RyujiIwata

* おしながき

- 対象システムの概要
- 問題点と対応策
- 開発要件
- Goが採用された理由
- Go採用での懸念事項
- 作成したGoツール

* 対象システムの概要

* 天候情報監視システム

- 天候センサーで測定した情報を集計してWebサイトに図やグラフで表示する。
- 測定する情報は、風向や風速、温度や湿度、日射量、など。
- 天候センサーは複数の地区に設置されている。

[ハードウェア構成]

- 天候センサー、サーバー、Webブラウザー

.image okayama-go-01/img/kouseizu.png 237 956

* サーバー

Microsoft Windows 7 32ビットOSのデスクトップPC。

FTP：Windows標準

- 天候センサーからの測定値をCSVファイルとしてFTPで受信する。

測定値管理システム

- 天候センサーと一緒にパッケージ販売されている製品。
- 受信したCSVファイルを元にHTMLファイルを生成する。
- HTMLファイル生成後に任意のコマンドを実行できる (新機能)

WWW：Apache HTTP Server

- 生成されたHTMLファイルなどを読み込んで測定値を図やグラフで表示する。

* 問題点と対応策

* 問題点

測定値管理システムから欲しい形の出力結果が得られない。

販売元に問い合わせたが「パッケージ販売のためカスタマイズできない」との回答。

[具体的な問題点]

1. 全ての地区の情報が１つのHTMLファイルで出力されてしまう。

- 地区ごとに１つのHTMLファイルで出力したい。

2. 表示対象のデータの範囲が１週間分と広い。

- 現時点から２４時間前までのデータを表示したい。

* 対応策

測定値管理システムの新機能「HTMLファイル生成後に任意のコマンドを実行できる」に着目。

問題点を解決するコマンドラインツールを作成して、HTMLファイル生成後に実行させることで対応。

* 開発要件

* 持ち合わせている今のバージョンの開発言語では開発したくない

今後のシステムのメンテナンスを考えると、古いものは使いたくない。

主にDelphi、Java、C#、Flexで開発しているが、いずれもバージョンが低い。

[バージョンを上げられない理由]

- 使用しているライブラリーやフレームワークに依存している。
- 既存システムをメンテナンスする必要があるため、など。

* サーバーを軽く保ちたい

理由

- デスクトップPCなので処理的な負荷を掛けたくない。
- インストールやセットアップのコストも掛けたくない。

Java、C#、Flexの場合

- アプリケーションを動作させるために別途ランタイムのインストールが必要。

Delphiの場合

- 実行バイナリーを生成できるが先の理由（バージョンが低い）で却下。

* Goが採用された理由

* 最近の開発言語である

オープンソースプロジェクトの恩恵にあやかる。

- 開発活動が活発である。
- 購入費用がかからない。

32ビットOSにも対応していた点も大きかったのではないかと。

* サーバーへの負荷が少ない

- サーバーへの別途ランタイムのインストールが不要。
- 作成した実行バイナリーを差し替えるだけでよい。
- 処理速度もそれなりに速い。

* 以前から私がアピールしていた

得体の知れない見ず知らずの開発言語ではなかった。

- 以前から職場にて「Go、良いですよ！q@w@p」とアピールしていた。
- GoのITイベントに参加したり発表したりしている実績も報告していた。

* Go採用での懸念事項

* （私以外に）Goを書ける人がいない

シンプルなコマンドとして実装することで対応。

- 本番化以降でのコード変更の発生機会を下げる。
- 他の開発言語で代替開発して対応できる範囲。

* Goをバージョンアップする必要がある

職場では、インターネットからソフトウェアをダウンロードする際には許可が必要。

入手するまでに時間もかかる。

- 必要性の説明、申請書の作成や提出、ソフトウェアのチェック、など。

結果的にGo 1系の間は手続きなしでダウンロードできる許可を得られた。

* 作成したGoツール

* 指定した文字列でテキストファイルを分割

HTMLファイル内にて各地区の情報は特定の文字列で区切られている。

.link https://github.com/qt-luigi/sepfile

  $ cat target.html
  <html><head><title>sample</title></head><body>
    foo
  <br>
    bar
  </body></html>

  $ sepfile target.html "<br>"

  $ cat target.html.1 
  <html><head><title>sample</title></head><body>
    foo

  $ cat target.html.2
    bar
  </body></html>

* CSVファイルから指定した日時と日数の範囲で行を抽出

CSVファイルの日付と時刻の列から現在日時からー１日までの行を取得する。

.link https://github.com/qt-luigi/selcsvdt

  $ cat test.csv
  "2018-05-28","21:57",1,"foo"
  "2018-05-29","20:21",2,"bar"
  "2018-05-30","13:46",3,"baz"

  $ selcsvdt test.csv 201805292000 1

  $ cat test.csv.1 
  "2018-05-29","20:21",2,"bar"
  "2018-05-30","13:46",3,"baz"

  $ selcsvdt test.csv 201805292000 -1

  $ cat test.csv.1 
  "2018-05-28","21:57",1,"foo"

* 指定したファイルが存在するか定期的に監視

FTPでのCSVファイルの受信や分割したHTMLファイルの作成の確認に使用。

.link https://github.com/qt-luigi/filewatcher

  ターミナル１で監視を実行

  $ filewatcher ../test.txt 1000
  17:39:49.461055 not found file or directory
  17:39:50.464103 not found file or directory

  ターミナル２でtest.txtを作成

  $ touch ../test.txt

  ターミナル１でファイルの存在を確認

  $ filewatcher ../test.txt 1000
  17:39:49.461055 not found file or directory
  17:39:50.464103 not found file or directory
  17:39:51.463808 found file or directory
  17:39:52.466070 found file or directory

* さいごに

業務にGoを導入したいが難しいという方々への参考になればと。

今思えばWWWサーバーもGoで書けばよかったのかなぁ、と。

初心者の方は「作成したGoツール」をGo学習がてら自分で書いてみては？q@w@p
