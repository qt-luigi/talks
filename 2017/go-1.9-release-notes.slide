Go 1.9 リリースノート
Go 1.9 Release Party in Okayama
20 Aug 2017

Ryuji Iwata
Okayama, Japan
@qt_luigi

* Ryuji Iwata

.image go-1.9-release-notes/img/qt_luigi250.png 300 300

Google+

.link https://plus.google.com/+RyujiIwata +RyujiIwata

Twitter

.link http://twitter.com/qt_luigi @qt_luigi

* Golang JP - Community - Google+

.link https://plus.google.com/communities/107075098212007233819

.image go-1.9-release-notes/img/golangjp.png 499 888

* 本資料について

以下、2017年8月20日時点の内容です。

参考資料：

2017年8月17日にオーストラリアのシドニーで開催された「Go1.9 Precursor Release Party」での資料、および、Go 1.9に関する日本語記事へのリンクを紹介しています。

リリースノート：

2017年8月20日に日本の岡山で開催する「Go 1.9 Release Party」で使用する資料として、ひとまず、公式のtipサイトのドラフト版「Go 1.9 Release Notes」

.link https://tip.golang.org/doc/go1.9

を、Google翻訳にて日本語訳して、変換ミスなどを少し手直ししたものです。（「Minor changes to the library」は、ほぼ見直しできていません...）

イベント限定＆参加者向けの資料の位置づけのため、間違いなどは直すかもしれないし直さないかもしれないし...m(_ _)m

* 参考資料

* Go1.9 Precursor Release Party: Go 1.9 and the Future of Go

2017年8月17日にオーストラリアのシドニーでパーティーの初日イベントとして開催。

The Future Of Go Part 1 - Live streamed version

.link https://www.youtube.com/watch?v=wpHggcP-L5M&feature=youtu.be

Go 1.9 Release Party

.link http://talks.godoc.org/github.com/davecheney/go-1.9-release-party/presentation.slide#1

* 日本語記事

Googleの言語「Go」、バージョン1.9の改良点

.link http://itpro.nikkeibp.co.jp/atcl/idg/14/481542/062000383/

Go1.9から使える Monotonic Clocks を試してみた

.link https://shogo82148.github.io/blog/2017/06/26/go19-monotonic-clock/

go言語1.9で追加予定の新機能 型エイリアス

.link http://qiita.com/weloan/items/8abbb4003cfa1031a9e9

* ドラフトリリースノート - Go 1.9の紹介

* 

Go 1.9はまだリリースされていません。これは作業中のリリースノートです。Go 1.9は、2017年8月にリリースされる予定です。

最新のGoリリース、バージョン1.9は、Go 1.8の6ヶ月後に到着し、Go 1.xシリーズの10番目のリリースです。言語には2つの変更があります。型のエイリアスに対するサポートの追加と、実装がいつ浮動小数点演算を融合できるかの定義です。ほとんどの変更は、ツールチェーン、ランタイム、およびライブラリーの実装にあります。いつものように、リリースはGo 1の互換性を約束しています。ほとんどすべてのGoプログラムは以前と同じようにコンパイルして実行することが期待されます。

このリリースでは、透過的なモノトニックタイムのサポートが追加され、パッケージ内の関数のコンパイルが並列化され、テストヘルパー関数のサポートが強化され、新しいビット操作パッケージが含まれています。

* 言語の変更

* 

言語には2つの変更があります。

Goは、パッケージ間で型を移動しながら、段階的なコード修復をサポートする型エイリアスをサポートします。型エイリアスの設計文書とリファクタリングに関する記事では、問題を詳細にカバーしています。型エイリアス宣言の形式は次のとおりです。

  type T1 = T2

この宣言では、T2で示される型のエイリアスT1（別のスペル）が導入されています。 つまり、T1とT2の両方が同じ型を示します。

より小さな言語変更は、アーキテクチャーの "fused multiply and add"（FMA）命令を使用して実装が浮動小数点演算を融合することが許されるときに中間結果x*yを丸めずにx*y + zを計算します。強制的に中間丸めを行うには、float64(x*y) + zと書いてください。

* ポート

* 

このリリースでは、新しくサポートされたオペレーティングシステムまたはプロセッサーアーキテクチャーはありません。

* ppc64xにはPOWER8が必要です

GOARCH=ppc64とGOARCH=ppc64leの両方で、少なくともPOWER8のサポートが必要となります。以前のリリースでは、GOARCH=ppc64leのみがPOWER8を必要とし、ビッグエンディアンのppc64アーキテクチャーは古いハードウェアをサポートしていました。

* FreeBSD

Go 1.9はFreeBSD 9.3上で動作する最後のリリースで、FreeBSDではすでにサポートされていません。Go 1.10にはFreeBSD 10.3以上が必要です。

* OpenBSD 6.0

Go 1.9ではcgoバイナリーのPT_TLS生成が可能になり、OpenBSD 6.0以降が必要になります。Go 1.9はOpenBSD 5.9をサポートしなくなりました。

* 既知の問題点

FreeBSDには不明な点がいくつかあります。ごくまれにプログラムがクラッシュする可能性があります。issue 15658を参照してください。このFreeBSD固有の問題を解決する助けがあれば感謝します。

NetBSDカーネルクラッシュ、NetBSD 7.1を含むNetBSDカーネルクラッシュのため、Go 1.9開発サイクル中にNetBSDビルダーの実行を停止しました。 Go 1.9がリリースされているので、NetBSD 7.1.1が修正されてリリースされています。しかし、現時点では、テストスイートに合格したNetBSDビルダーはいません。さまざまなNetBSDの問題を調査する助けがあれば歓迎されます。

* ツール

* 並列コンパイル

Goコンパイラーは複数のコアを利用してパッケージの関数を並列にコンパイルする機能をサポートしました。これは別々のパッケージの並列コンパイルのためのgoコマンドの既存のサポートに追加されています。並列コンパイルはデフォルトでオンになっていますが、環境変数GO19CONCURRENTCOMPILATIONを0に設定すると無効にすることができます。

* ./... と一致するベンダー

一般的な要求では、./... は、go testのようなパッケージ名を受け入れるツールのベンダーディレクトリー内のパッケージとはもはやマッチしません。ベンダーのディレクトリーを照合するには、./vendor/...と記述します。

* 移動したGOROOT

goツールは、起動されたパスを使用して、Goインストールツリーのルートの検索を試みます。つまり、Goインストール全体を新しい場所に移動すると、goツールは引き続き通常どおり動作するはずです。これは、環境内でGOROOTを設定することによってオーバーライドされる可能性があります。これは、通常とは異なる状況でのみ行う必要があります。これは、runtime.GOROOT関数の結果には影響しないことに注意してください。これは元のインストール場所を報告し続けます。これは後のリリースで修正される可能性があります。

* コンパイラツールチェーン

複素数除算は現在C99と互換性があります。これは常にgccgoのケースであり、gcのツールチェーンで修正されています。

リンカーはWindows上でcgo実行ファイルのDWARF情報を生成します。

-N -lフラグが指定されていれば、生成されたDWARFにレキシカルスコープが含まれ、スコープ内にない変数をデバッガが隠すことができます。.debug_infoセクションはDWARFバージョン4になりました。

GOARMとGO386の値は、goツールの依存関係キャッシングで使用されるように、コンパイルされたパッケージのビルドIDに影響を与えるようになりました。

* アセンブラ

4つのオペランドのARM MULA命令が正しくアセンブルされ、3番目の引数として加数レジスターが使用され、最後の4番目の引数として結果レジスターが使用されます。以前のリリースでは、2つの意味が逆になりました。第4引数が第3引数と暗黙的に同じである3オペランド形式は影響を受けません。 4オペランドMULA命令を使用するコードは更新する必要がありますが、この形式はごくまれにしか使用されません。 MULAWTとMULAWBはすでにすべての形式で正しい順序を使用していて、変更されていません。

アセンブラはADDSUBPS/PDをサポートし、2つの欠落しているx86 SSE3命令を完了しました。

* Doc

引数の長いリストは切り捨てられます。 これにより、生成されたコードの一部でgo docの可読性が向上します。

構造体フィールドのドキュメントの表示がサポートされるようになりました。 たとえば、doc http.Client.Jarに移動します。

* Env

新しいgo env -jsonフラグは、デフォルトのOS固有の出力フォーマットの代わりにJSON出力を有効にします。

* Test

go testコマンドは、引数として正規表現を取り、一致するテスト、ベンチマーク、またはサンプルの名前を実行せずにstdoutに出力する新しい-listフラグを受け入れます。

* Pprof

runtime/pprofパッケージで生成されたプロファイルにはシンボル情報が含まれるようになりました。プロファイルを生成したバイナリなしでgo tool pprofで表示できます。

go tool pprofコマンドは、http.ProxyFromEnvironmentを使用して、環境で定義されたHTTPプロキシ情報を使用するようになりました。

* Vet

vetコマンドはgoツールとの統合が進んでいます。したがって、go vetは現在すべての標準ビルドフラグをサポートしていますが、vet独自のフラグはgo vetやgo tool vetから有効にできます。

* Gccgo

Goの半期リリーススケジュールとGCCの年間リリーススケジュールとの整合性により、GCCリリース7にはGo 1.8.3バージョンのgccgoが含まれています。次のリリースのGCC 8にはgccgoのGo 1.10バージョンが含まれることを期待しています。

* ランタイム

* インラインフレームでのスタック呼び出し

runtime.Callersのユーザーは、結果として得られるPCスライスを直接検査するのではなく、runtime.CallersFramesを使用して呼び出しスタックの完全なビューを取得するか、runtime.Callerを使用して単一の呼び出し元に関する情報を取得する必要があります。これは、PCスライスの個々の要素がインラインフレームやコールスタックの他のニュアンスを考慮できないためです。

具体的には、PCスライスを直接反復し、runtime.FuncForPCなどの関数を使用して各PCを個別に解決するコードでは、インラインフレームが欠落します。スタックの完全なビューを取得するには、代わりにCallersFramesを使用する必要があります。同様に、コードでは、Callerによって返された長さがコール深度を示すものであると仮定すべきではありません。代わりにCallersFramesによって返されるフレーム数をカウントする必要があります。

* 

特定の深さで単一の呼び出し元に照会するコードでは、呼び出し元に長さ1のスライスを渡すのではなく、呼び出し元を使用する必要があります。

runtime.CallersFramesはGo 1.7から使用可能になっているため、Go 1.9にアップグレードする前にコードを更新することができます。

* パフォーマンス

* 

いつものように、変更は非常に一般的で多様であり、パフォーマンスに関する正確な記述は難しいです。ほとんどのプログラムは、ガベージコレクターの高速化、より良いコードの生成、コアライブラリーの最適化のために、少し速く実行することがあります。

* ガーベジコレクター

世界的なガベージコレクションをトリガーするために使用されたライブラリー関数は、現在、ガーベジコレクションを同時にトリガーします。 具体的には、runtime.GC、debug.SetGCPercent、およびdebug.FreeOSMemoryは、ガベージコレクションが完了するまで、呼び出し元のgoroutineだけをブロックして、同時ガベージコレクションをトリガーするようになりました。

debug.SetGCPercent関数は、新しいGOGC値のためにすぐに必要な場合にのみガベージコレクションをトリガーします。 これにより、オンザフライでGOGCを調整することができます。

ラージオブジェクト割り当てのパフォーマンスは、大きなオブジェクトを多数含むラージ（> 50GB）ヒープを使用するアプリケーションで大幅に向上します。

runtime.ReadMemStats関数は、非常に大きなヒープでも100μs以下で済みます。

* コアライブラリー

* 透過的なモノトニックタイムのサポート

timeパッケージでは、各Time値のモノトニックタイムを透過的に追跡し、2つのTime値の間の計算時間を壁時計の調整がある場合の安全な操作にします。詳細については、パッケージのドキュメントと設計ドキュメントを参照してください。

* 新しいビット操作パッケージ

Go 1.9には、ビットを操作するための最適化された実装による新しいパッケージmath/bitsが含まれています。 ほとんどのアーキテクチャでは、このパッケージの関数はコンパイラーによって認識され、追加のパフォーマンスのための組み込み関数として扱われます。

* テストヘルパー関数

新しい (*T).Helper メソッドと (*B).Helper メソッドは、呼び出し元の関数をテストヘルパー関数としてマークします。ファイルと行情報を表示すると、その機能はスキップされます。これにより、ユーザーに有用な行番号を残したまま、テストヘルパー関数を書くことができます。

* コンカレントマップ

同期パッケージ内の新しいマップタイプは、償却された一定時間のロード、ストア、および削除を含むコンカレントマップです。 複数のgoroutineがMapのメソッドを同時に呼び出すことは安全です。

* プロファイラーラベル

runtime/pprofパッケージは、pprofプロファイラーレコードにラベルを追加することをサポートするようになりました。ラベルは、pprofコマンドでプロファイルを見るときに、異なるコンテキストで同じ関数の呼び出しを区別するために使用されるキー値マップを形成します。 pprofパッケージの新しいDo関数は、指定されたラベルに関連付けられたコードを実行します。 パッケージ内の他の新しい機能は、ラベルの操作に役立ちます。

* ライブラリーのマイナー変更

いつものように、互換性の約束を念頭に置いて作られたライブラリーには、さまざまなマイナーな変更やアップデートがあります。

* 

archive/zip

ZIP Writerは、必要に応じてFileHeader.FlagsにUTF-8ビットを設定するようになりました。

* 

crypto/rand

Linuxでは、GoはGRND_NONBLOCKフラグなしでgetrandomシステムコールを呼び出します。カーネルが十分なランダム性を持つまでブロックされます。getrandomシステムコールより前のカーネルでは、Goは/dev/urandomからの読み込みを続けます。

* 

crypto/x509

Unixシステムでは、環境変数SSL_CERT_FILEとSSL_CERT_DIRを使用して、それぞれSSL証明書ファイルとSSL証明書ファイルディレクトリーのシステムのデフォルトの場所を上書きすることができます。

FreeBSDファイル/usr/local/etc/ssl/cert.pemが証明書検索パスに含まれるようになりました。

このパッケージでは、名前制約で除外ドメインがサポートされるようになりました。このような制約を実施することに加えて、CreateCertificateは、提供されたテンプレート証明書に新しいフィールドExcludedDNSDomainsが設定されている場合、除外された名前制約を持つ証明書を作成します。

証明書にDSN名を含めてSAN拡張が存在する場合、SubjectからのCommon Nameは無視されます。以前のリリースでは、コードはDNS名のSANが証明書に存在するかどうかだけをテストしました。

* 

database/sql

パッケージは、Tx.Stmtで利用可能であれば、キャッシュされたStmtを使用するようになりました。これにより、Tx.Stmtが呼び出されるたびにステートメントが再作成されることを防ぎます。

このパッケージでは、driver.NamedValueCheckerを実装することにより、ドライバが独自の引数チェッカを実装できるようになりました。これにより、ドライバーはOUTPUTおよびINOUTパラメーター型をサポートできます。ドライバーがサポートしている場合は、出力パラメーターを返すためにOutを使用する必要があります。

Rows.Scanはユーザー定義の文字列型をスキャンできるようになりました。以前は、Int Int64型のような数値型へのスキャンがサポートされていました。現在は、文字列型のような文字列型へのスキャンもサポートしています。

新しいDB.Connメソッドは、接続プールからデータベースへの排他的接続を表す新しいConn型を返します。 Connで実行されるすべてのクエリーは、接続プールに接続を返すためにConn.Closeが呼び出されるまで、同じ基本接続を使用します。

* 

encoding/asn1

新しいNullBytesとNullRawValueは、ASN.1 NULL型を表します。

* 

encoding/base32

新しいEncoding.WithPaddingメソッドは、カスタムパディング文字のサポートとパディングの無効化を追加します。

* 

encoding/csv

新しいフィールドReader.ReuseRecordは、Readへの呼び出しが、以前の呼び出しで返されたスライスのバッキング配列を共有するスライスを返して、パフォーマンスを向上させるかどうかを制御します。

* 

fmt

浮動小数点数と複素数を印刷するときにシャープフラグ('#')がサポートされるようになりました。%e、%E、%f、%F、%g、%Gの小数点を常に出力します。 %gと%Gの末尾の0は削除されません。

* 

hash/fnv

このパッケージには、それぞれNew128とNew128aの128ビットFNV-1とFNV-1aハッシュサポートが含まれています。

* 

html/template

事前定義されたエスケープ（ "html"、"urlquery"、"js"のいずれか）がパイプラインで見つかり、自動エスケープが自ら決定したものと一致しない場合、パッケージはエラーを報告するようになりました。これにより、特定のセキュリティまたは正確性の問題が回避されます。これらのエスケープの1つの使用は、常にノーオペレーションかエラーのいずれかです。（no-opの場合は、text / templateからの移行が容易になります。）

* 

image

Rectangle.Intersectメソッドは、文書化されているように隣接しているがオーバーラップしていない四角形で呼び出されたときにゼロのRectangleを返すようになりました。 以前のリリースでは、空白だがゼロでないRectangleを誤って返していました。

* 

image/color

YCbCrからRGBAへの変換式は、丸め調整が完全な[0, 0xffff] RGBA範囲に及ぶように調整されています。

* 

image/png

新しいEncoder.BufferPoolフィールドでは、エンコーダーがPNGイメージをエンコードする際に一時的なEncoderBufferバッファーを取得するために使用するEncoderBufferPoolを指定できます。 BufferPoolを使用すると、複数のイメージをエンコードする際に実行されるメモリ割り当ての数が減ります。

パッケージは透明な8ビットグレースケール（ "Gray8"）イメージのデコードをサポートするようになりました。

* 

math/big

新しいIsInt64およびIsUint64メソッドは、Intがint64またはuint64値として表されるかどうかを報告します。

* 

mime/multipart

新しいFileHeader.Sizeフィールドは、マルチパートメッセージ内のファイルのサイズを記述します。

* 

net

新しいResolver.StrictErrorsは、A+AAAAアドレスルックアップなど、複数のサブクエリーで構成されるクエリ中にGoのビルトインDNSリゾルバが一時的なエラーを処理する方法を制御します。

新しいResolver.Dialを使用すると、Resolverはカスタムダイヤル機能を使用できます。

ホストにコロンが含まれている場合にのみ、JoinHostPortは角カッコでアドレスを配置します。 以前のリリースでは、アドレスにパーセント記号('%')が含まれている場合は角かっこで囲みます。

新しいメソッドTCPConn.SyscallConn、IPConn.SyscallConn、UDPConn.SyscallConn、およびUnixConn.SyscallConnは、接続の基礎となるファイル記述子へのアクセスを提供します。

Listen（"tcp", "：0"）でリスナーを作成した後、（* TCPListener）.String（）から取得したアドレスでDialを呼び出すことは安全です。 以前は、半構成のIPv6スタックを持ついくつかのマシンでは失敗しました。

* 

net/http

CookieとSet-Cookieヘッダーに使用されるCookie.Stringメソッドは、値にスペースまたはカンマのいずれかが含まれている場合、値を二重引用符で囲みます。

サーバーの変更：

- ServeMuxは、ハンドラーを照合する際に、ホストヘッダーのポートを無視するようになりました。 CONNECT要求の場合、ホストは変更されていません。
- 新しいServer.ServeTLSメソッドは、TLSサポートが追加されたServer.Serveをラップします。
- Server.WriteTimeoutはHTTP / 2接続に適用され、ストリームごとに強制されます。
- HTTP/2ではデフォルトで優先度書き込みスケジューラが使用されるようになりました。 フレームは、RFC 7540セクション5.3で説明されているように、HTTP/2の優先順位に従ってスケジュールされます。

* 

- StripPrefixから返されたHTTPハンドラは、元の *http.Request の変更されたクローンを持つ提供されたハンドラーを呼び出すようになりました。 *http.Requestでキー設定されたマップに要求ごとの状態を格納するコードは、代わりにRequest.Context、Request.WithContext、およびcontext.WithValueを使用する必要があります。

クライアント＆トランスポートの変更点：

- トランスポートは、Transport.Proxyによって返されたURLがスキームsocks5を持つ場合、SOCKS5プロキシ経由でリクエストを作成するようになりました。

* 

net/http/fcgi

新しいProcessEnv関数は、REMOTE_USERなどの適切なhttp.Requestフィールドが存在しないHTTP要求に関連付けられたFastCGI環境変数を返します。

* 

net/http/httptest

新しいServer.Clientメソッドは、テストサーバーに要求を行うように構成されたHTTPクライアントを返します。

新しいServer.Certificateメソッドは、テストサーバーのTLS証明書があれば返します。

* 

net/http/httputil

ReverseProxyは、最初の応答ヘッダーで宣言されていない場合でも、すべてのHTTP/2応答トレーラーをプロキシします。 そのような宣言されていない予告編は、gRPCプロトコルによって使用されます。

* 

os

osパッケージは、ファイルI/O用の内部ランタイムポーラーを使用するようになりました。 これにより、パイプ上の読み込み/書き込み操作に必要なスレッドの数が減り、あるゴルーチンがファイルを閉じて別のゴルーチンがファイルをI/O用に使用しているときに競合が解消されます。

Windowsでは、argsにshell32.dllを設定せずに、プロセスの起動時間を1〜7ms改善しました。

* 

os/exec

os/execパッケージは、子プロセスが重複した環境変数で作成されるのを防ぎます。 Cmd.Envに重複環境キーが含まれている場合は、各重複キーのスライス内の最後の値のみが使用されます。

* 

os/user

LookupとLookupIdは、CGO_ENABLED = 0のときに/etc/passwdファイルを読むことでUnixシステム上で動作するようになりました。

LookupGroupとLookupGroupIdは、CGO_ENABLED=0のときにUnixシステム上で/etc/groupファイルを読み込んで動作するようになりました。

* 

reflect

新しいMakeMapWithSize関数は、容量ヒントを持つマップを作成します。

* 

runtime

ランタイムによって生成され、プロファイルに記録されたトレースバックは、インライン展開が存在する場合に正確になりました。 プログラムでトレースバックを取得するには、アプリケーションでruntime.Callersの結果を直接反復処理するのではなく、runtime.CallersFramesを使用する必要があります。

Windowsでは、プログラムがアイドル状態のときにGoはシステムタイマーを高解像度で実行する必要がなくなりました。 これにより、Goプログラムがバッテリ寿命に与える影響を軽減することができます。

FreeBSDでは、GOMAXPROCSとruntime.NumCPUは現在、CPUの総数ではなく、プロセスのCPUマスクに基づいています。

ランタイムには、Android Oの予備サポートがあります。

* 

runtime/debug

負の値でSetGCPercentを呼び出すと、すぐにガベージコレクションが実行されなくなります。

* 

runtime/trace

実行トレースにマークアシストイベントが表示されるようになりました。これは、アプリケーションのゴルーチンがあまりにも迅速に割り当てられているためガーベジコレクションをいつ支援するのかを示します。

"スイープ" イベントは、掃引される個々のスパンを記録するのではなく、割り当てのための空きスペースを見つける全プロセスを包含するようになりました。 これは、割り当ての多いプログラムをトレースするときの割り当てレイテンシを削減します。 スイープイベントは、スイープされたバイト数と再利用されたバイト数を示します。

* 

sync

ミューテックスは今より公正です。

* 

syscall

新しいフィールドCredential.NoSetGroupsは、Unixシステムが新しいプロセスを開始するときに補足グループを設定するsetgroupsシステムコールを行うかどうかを制御します。

新しいフィールドSysProcAttr.AmbientCapsを使用すると、新しいプロセスを作成するときにLinux 4.3以降の環境機能を設定できます。

64ビットx86 Linuxでは、CLONE_VFORKおよびCLONE_VMを使用してプロセス作成のレイテンシーを最適化しました。

新しいConnインターフェースでは、新しいRawConnインタフェースを使用して基礎となるファイル記述子へのアクセスを提供できるネットパッケージのいくつかの型が記述されています。

* 

testing/quick

int64とuint64の乱数を生成するとき、パッケージは現在フルレンジの値を選択します。 以前のリリースで生成された値は常に[-262,262]の範囲に制限されていました。

以前のリリースでは、nil Config.Randの値を使用すると、固定の確定的乱数ジェネレータが使用されていました。 これは、現在の時刻でシードされた乱数ジェネレーターを使用するようになりました。 古い動作では、Config.Randをrand.New(rand.NewSource(0))に設定します。

* 

text/template

テンプレートの順序に依存する結果を出すGo 1.8の変更によって破壊された空のブロックの処理が修正され、古いGo 1.7の動作が復元されました。

* 

time

新しいメソッドDuration.RoundとDuration.Truncateは、継続時間を四捨五入し、指定した期間の倍数に切り捨てます。

時間を取得して寝るのがWineで正しく動作するようになりました。

Time値が単調なクロック読み取り値を持つ場合、その文字列表現（Stringによって返される）に最終フィールド "m=±value"が含まれます。ここで、valueは10進数の秒単位で書かれた単調時計です。

含まれているtzdataタイムゾーンデータベースがバージョン2017bに更新されました。 いつものように、システムがまだデータベースを利用できない場合にのみ使用されます。
